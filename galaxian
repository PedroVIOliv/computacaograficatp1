#include <GL/glew.h>
#include <GL/freeglut.h>
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
//#include <SDL2/SDL.h>
//#include <SDL/SDL.h>
//#include "SDL/SDL_opengl.h"
//#include "SDL/SDL_image"
#define DISTANCIA_X 50 //Distancia horizontal inicial entre cada inimigo, considerando a posicao "x" de cada inimigo
#define DISTANCIA_Y 60 //Distancia vertical inicial entre cada inimigo, considerando a posicao "y" de cada inimigo
#define NUM_MAX_INIMIGOS 27 //Tem que ser múltiplo de "LINHAS_INIMIGOS"    || NUM_MAX_INIMIGOS / LINHAS_INIMIGOS resulta em quantas colunas de inimigos
#define LINHAS_INIMIGOS 3 //Quantas linhas de inimigos vai ter
#define POSICAO_INICIAL_INIMIGOS_Y 450
#define TAMANHO_MINIMO_INIMIGOS 6
#define VARIACAO_TAMANHO_INIMIGOS 0.5

/*GLuint loadTexture(const std::string&fileName){
    SDL_Surface *imagem = IMG_Load(fileName.c_str());
    SDL_DisplayFormatAlpha(imagem);
    unsigned object(0);
    glGenTextures(1, &object);
    glBindTexture(GL_TEXTURE_2D, object);

    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, imagem->w, imagem->h, 0, GL_RGBA, GL_UNSIGNED_BYTE, imagem->pixels);

    SDL_FreeSurface(imagem);

    return object;
}*/

class Posicao{
public:
    float x;
    float y;
    bool colidiu = false;
};

class Tamanho{
public:
    float largura;
    float comprimento;
};

class Inimigo{
public:
    float x;
    float y;
    bool colidiu = false;
    int faltaPara45;
    int esquerdaDireita;
    int jaMoveuParaBaixo;
};

Posicao posicao_player;
Tamanho tamanho_player;
Posicao *tiros = (Posicao*) malloc(1 * sizeof (Posicao));
Inimigo *inimigos = (Inimigo*) malloc(5 * sizeof (Inimigo)); //Começar com cinco inimigos
Posicao *tiros_inimigos = (Posicao*) malloc (1 * sizeof(Posicao));
Tamanho tamanho_tiros;
int quantidade_tiros = 0;
int quantidade_inimigos = 5;
bool paused = false; //Variavel que determinará se o jogo está pausado ou não
int nivel = 1; //nivel -1 vai ser o menu, o nivel 0 vai ser as instruções, os niveis maiores que 0 vão ser as fases

//Vetor que marca quais posições podem ter inimigos
Posicao *posicao_inimigos = (Posicao*) malloc(NUM_MAX_INIMIGOS * sizeof(Posicao));
Tamanho tamanho_inimigos;
int inimigos_mortos = 0;
int quantidade_tiros_inimigos = 0;
int tempo = -200; //Variável de controle para determinarmos o "tempo" que cada evento acontecerá
int tempo_tiro = 300; //Frequência inicial dos tiros dos inimigos
float variacao_nivel = 1; //velocidade dos tiros_inimigos
int primeiro_tiro = 0;
float tamanhoInimigo = 20;
int frame_atual_player = 0;
int quantidade_frames_player = 4;


void cria_tiros_inimigos(){
    quantidade_tiros_inimigos = (quantidade_inimigos - inimigos_mortos); //Vai criar tiros na mesma quantidade dos inimigos vivos
    tiros_inimigos = (Posicao*) realloc(tiros_inimigos, (quantidade_tiros_inimigos + 4) * sizeof(Posicao));
    int j = 0;
    for(int i = 0; i < quantidade_tiros_inimigos; i++){
        if(inimigos[j].colidiu == false){ //Se o inimigo não colidiu, podemos criar tiros para ele
            tiros_inimigos[i].x = inimigos[j].x + (tamanho_inimigos.largura/2);
            tiros_inimigos[i].y = inimigos[j].y;
        }
        else{ //Se tiver colidido, vamos procurar o próximo que está vivo para dar "municao" para ele
            do{
                j++;
                if(j == quantidade_inimigos){ //Pois o vetor vai de 0 até quantidade_inimigos - 1;
                    j = 0;
                }
            }while(inimigos[j].colidiu == true); //Enquanto não acha um inimigo "disponível"

            tiros_inimigos[i].x = inimigos[j].x + (tamanho_inimigos.largura/2);
            tiros_inimigos[i].y = inimigos[j].y;
            //j++;
        }
        j++;
        if(j == quantidade_inimigos){
            j = 0;
        }
    }
}


void inicializa(){
    glClear(GL_COLOR_BUFFER_BIT);
    //glClearColor(1.0, 1.0, 1.0, 1.0);
    glClearColor(0.0, 0.0, 0.0, 0.0);
    quantidade_tiros = 0;
    posicao_player.x = 240; //Posicao inicial do jogador
    posicao_player.y = 0;
    tamanho_player.comprimento = 30; //Tamanho do jogador
    tamanho_player.largura = 10;
    tamanho_tiros.comprimento = 5; //Tamanho dos tiros
    tamanho_tiros.largura = 2;
    tamanho_inimigos.comprimento = tamanhoInimigo; //Tamanho do inimigo, o qual vai variar com o passar das fases
    tamanho_inimigos.largura = tamanhoInimigo;
    int k = 0;
    int distancia_x = 20;
    int distancia_y = POSICAO_INICIAL_INIMIGOS_Y;
    for(int i = 0; i< LINHAS_INIMIGOS; i++){
        for(int j = 0; j < (NUM_MAX_INIMIGOS/LINHAS_INIMIGOS); j++){
            posicao_inimigos[k].x = distancia_x;
            posicao_inimigos[k].y = distancia_y;
            distancia_x += DISTANCIA_X;
            k++;
        }
        distancia_y -= DISTANCIA_Y;
        distancia_x = 20;
    }
    int posicao_aleatoria = 0;
    int irParaDireita = 1;
    int irParaEsquerda = 0;
    int variavel_controle = 0;
    srand(time(NULL));
    for(int i = 0; i < quantidade_inimigos; i++){
            posicao_aleatoria = rand() % NUM_MAX_INIMIGOS;
            if(posicao_inimigos[posicao_aleatoria].x != NULL){
                inimigos[i].x = posicao_inimigos[posicao_aleatoria].x;
                inimigos[i].y = posicao_inimigos[posicao_aleatoria].y;
                posicao_inimigos[posicao_aleatoria].x = NULL;
                inimigos[i].colidiu = false;
                inimigos[i].faltaPara45 = 45;
                inimigos[i].jaMoveuParaBaixo = 0;
                if(variavel_controle == 0){
                    inimigos[i].esquerdaDireita = 0;
                    variavel_controle = 1;
                }
                else{
                    inimigos[i].esquerdaDireita = 1;
                    variavel_controle = 0;
                }
            }
            else{
                i--;
            }
    }
    tempo = -200;
    primeiro_tiro = 0;
    inimigos_mortos = 0;

}

void desenha(){ //desenha com colisão
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0, 0, 1);

    //Desenhar jogador
    glBegin(GL_POLYGON);
        glVertex3f(posicao_player.x, posicao_player.y, 1);
        glVertex3f(posicao_player.x + tamanho_player.largura, posicao_player.y, 1);
        glVertex3f(posicao_player.x + tamanho_player.largura, posicao_player.y + tamanho_player.comprimento, 1);
        glVertex3f(posicao_player.x, posicao_player.y + tamanho_player.comprimento, 1);
    glEnd();

    //Desenhar tiros
    //glColor3f(0, 0, 0);
    glColor3f(1, 1, 1);
        for(int i = 0; i < quantidade_tiros; i++){
            //condição para o programa não desenhar o tiro sempre para não perder tanto desempenho
            if(!tiros[i].y < 500){
                glBegin(GL_POLYGON);
                    glVertex3f(tiros[i].x, tiros[i].y, 1);
                    glVertex3f(tiros[i].x + tamanho_tiros.largura, tiros[i].y, 1);
                    glVertex3f(tiros[i].x + tamanho_tiros.largura, tiros[i].y + tamanho_tiros.comprimento, 1);
                    glVertex3f(tiros[i].x, tiros[i].y + tamanho_tiros.comprimento, 1);
                glEnd();
            }
        }
    //Desenhar inimigos
    glColor3f(1, 0, 0);
    //if(nivel == 1){
        for(int i = 0; i < quantidade_inimigos; i++){
            if(!inimigos[i].colidiu){
                glBegin(GL_POLYGON);
                    glVertex3f(inimigos[i].x, inimigos[i].y, 1);
                    glVertex3f(inimigos[i].x + tamanho_inimigos.largura, inimigos[i].y, 1);
                    glVertex3f(inimigos[i].x + tamanho_inimigos.largura, inimigos[i].y + tamanho_inimigos.comprimento, 1);
                    glVertex3f(inimigos[i].x, inimigos[i].y + tamanho_inimigos.comprimento, 1);
                glEnd();
            }
        }

        glColor3f(1, 1, 1);
        for(int i = 0; i < quantidade_tiros_inimigos; i++){
            //condição para o programa não desenhar o tiro sempre para não perder tanto desempenho
            if(tiros_inimigos[i].y > 0){
                glBegin(GL_POLYGON);
                    glVertex3f(tiros_inimigos[i].x, tiros_inimigos[i].y, 1);
                    glVertex3f(tiros_inimigos[i].x + tamanho_tiros.largura, tiros_inimigos[i].y, 1);
                    glVertex3f(tiros_inimigos[i].x + tamanho_tiros.largura, tiros_inimigos[i].y + tamanho_tiros.comprimento, 1);
                    glVertex3f(tiros_inimigos[i].x, tiros_inimigos[i].y + tamanho_tiros.comprimento, 1);
                glEnd();
            }
        }

    glutSwapBuffers();

}


void redimensiona(int w, int h) {
    glViewport(0, 0, w, h);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0, 500, 0, 500, -1, 1);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void teclado(unsigned char key, int x, int y) {
   switch(key) {
      // Tecla ESC
      case 27:
         free(tiros);
         free(inimigos);
         free(posicao_inimigos);
         exit(0);
         break;
      case 100: //Tecla "d" - Vai para direita
        if(posicao_player.x < 490 && paused == false){
            posicao_player.x += tamanho_player.largura;
        }
        break;
      case 97: //Tecla "a" - Vai para esquerda
        if(posicao_player.x > 0 && paused == false){
            posicao_player.x -= tamanho_player.largura;
        }
        break;
      case 32: //Tecla "Espaço" - Atira
          if(paused == false){
              quantidade_tiros++;
              tiros = (Posicao *) realloc(tiros, (quantidade_tiros+4) * sizeof(Posicao));
              tiros[quantidade_tiros-1].x = posicao_player.x + (tamanho_player.largura)/2;
              tiros[quantidade_tiros - 1].y = posicao_player.y + tamanho_player.comprimento;
          }
          break;
      case 114: // Tecla "r" - Reinicia o jogo
        inicializa();
        break;
      case 50: //Tecla "2" - Dá dois tiros ao mesmo tempo
        if(paused == false){
            quantidade_tiros += 2;
            tiros = (Posicao *) realloc(tiros, (quantidade_tiros + 7) * sizeof(Posicao));
            tiros[quantidade_tiros-2].x = posicao_player.x;
            tiros[quantidade_tiros - 2].y = posicao_player.y + tamanho_player.comprimento;
            tiros[quantidade_tiros - 1].x = posicao_player.x + tamanho_player.largura - tamanho_tiros.largura;
            tiros[quantidade_tiros - 1].y = posicao_player.y + tamanho_player.comprimento;
        }
        break;
      case 112: //Tecla "p" - Pausa ou despausa o jogo
        if(paused == true){
            paused = false;
        }
        else{
            paused = true;
        }
      default:
         break;
   }
}

/*void movimenta_inimigos(){
    for(int i = 0; i < quantidade_inimigos; i++){
        if(inimigos[i].colidiu == false){
            //printf("Que y: %.2f\n", inimigos[i].y);
            if(inimigos[i].y == 450){
                inimigos[i].x -= tamanho_inimigos.largura/2;
                if(inimigos[i].x >= 2 && inimigos[i].x <= 8){
                    inimigos[i].y -= tamanho_inimigos.comprimento/2;
                    inimigos[i].esquerdaDireita = 1;//agora vai para direita
                    inimigos[i].faltaPara45 -= tamanho_inimigos.comprimento/2;
                    inimigos[i].jaMoveuParaBaixo = 1;
                }
            }
            else if(inimigos[i].y == 390){
                inimigos[i].x += tamanho_inimigos.largura/2;
                if(inimigos[i].x >= 482 && inimigos[i].x <= 488){
                    inimigos[i].y -= tamanho_inimigos.comprimento/2;
                    inimigos[i].esquerdaDireita = 0;
                    inimigos[i].faltaPara45 -= tamanho_inimigos.comprimento/2;
                    inimigos[i].jaMoveuParaBaixo = 1;
                }
            }
            else if((inimigos[i].y + tamanho_inimigos.largura <= tamanho_player.comprimento && inimigos[i].y > 0) && (inimigos[i].x <= posicao_player.x + tamanho_player.largura && inimigos[i].x + tamanho_inimigos.largura >= posicao_player.x + tamanho_player.largura || inimigos[i].x + tamanho_inimigos.largura >= posicao_player.x && inimigos[i].x + tamanho_inimigos.largura <= posicao_player.x + tamanho_player.largura)){
                    quantidade_tiros = 0;
                    quantidade_tiros_inimigos = 0;
                    tiros = (Posicao*) realloc(tiros, 2 * sizeof(Posicao));
                    inimigos = (Inimigo*) realloc(inimigos, (quantidade_inimigos + 1) * sizeof(Inimigo));
                    inimigos_mortos = 0;
                    inicializa();
            }
            else if(inimigos[i].y <= 0){
                    quantidade_tiros = 0;
                    quantidade_tiros_inimigos = 0;
                    tiros = (Posicao*) realloc(tiros, 2 * sizeof(Posicao));
                    inimigos = (Inimigo*) realloc(inimigos, (quantidade_inimigos + 1) * sizeof(Inimigo));
                    inimigos_mortos = 0;
                    inicializa();
            }
            else{
                if(inimigos[i].faltaPara45 > 0 && inimigos[i].jaMoveuParaBaixo == 1){
                    if(inimigos[i].faltaPara45 > 3){
                        inimigos[i].faltaPara45 -= tamanho_inimigos.comprimento/2;
                        inimigos[i].y -= tamanho_inimigos.comprimento/2;
                    }
                    else{
                        inimigos[i].y -= 3;
                        inimigos[i].faltaPara45 -= 3;
                    }
                }
                else{
                    if(inimigos[i].esquerdaDireita == 0){
                        inimigos[i].x -= tamanho_inimigos.largura/2;
                        if(inimigos[i].x >= 2 && inimigos[i].x <= 8){
                            inimigos[i].esquerdaDireita =1;
                            inimigos[i].faltaPara45 = 45;
                            inimigos[i].jaMoveuParaBaixo = 1;
                        }
                    }
                    else{
                        inimigos[i].x += tamanho_inimigos.largura/2;
                        if(inimigos[i].x >= 482 && inimigos[i].x <= 488){
                            inimigos[i].esquerdaDireita = 0;
                            inimigos[i].faltaPara45 = 45;
                            inimigos[i].jaMoveuParaBaixo = 1;
                        }
                    }
                }
            }
        }
    }
}*/

void movimenta_inimigos(){ //movimenta_inimigos com variação do tamanho do inimigo
    for(int i = 0; i < quantidade_inimigos; i++){
        if(inimigos[i].colidiu == false){
            //printf("Que y: %.2f\n", inimigos[i].y);
            if((inimigos[i].y + tamanho_inimigos.largura <= tamanho_player.comprimento && inimigos[i].y > 0 || inimigos[i].y < tamanho_player.comprimento) && (inimigos[i].x <= posicao_player.x + tamanho_player.largura && inimigos[i].x + tamanho_inimigos.largura >= posicao_player.x + tamanho_player.largura || inimigos[i].x + tamanho_inimigos.largura >= posicao_player.x && inimigos[i].x + tamanho_inimigos.largura <= posicao_player.x + tamanho_player.largura)){
                    quantidade_tiros = 0;
                    quantidade_tiros_inimigos = 0;
                    tiros = (Posicao*) realloc(tiros, 2 * sizeof(Posicao));
                    inimigos = (Inimigo*) realloc(inimigos, (quantidade_inimigos + 1) * sizeof(Inimigo));
                    inimigos_mortos = 0;
                    inicializa();
            }
            else if(inimigos[i].y <= 0){
                    quantidade_tiros = 0;
                    quantidade_tiros_inimigos = 0;
                    tiros = (Posicao*) realloc(tiros, 2 * sizeof(Posicao));
                    inimigos = (Inimigo*) realloc(inimigos, (quantidade_inimigos + 1) * sizeof(Inimigo));
                    inimigos_mortos = 0;
                    inicializa();
            }
            else{
                if(inimigos[i].faltaPara45 > 0 && inimigos[i].jaMoveuParaBaixo == 1){
                    if(inimigos[i].faltaPara45 > 3){
                        inimigos[i].faltaPara45 -= tamanho_inimigos.comprimento/2;
                        inimigos[i].y -= tamanho_inimigos.comprimento/2;
                    }
                    else{
                        inimigos[i].y -= 3;
                        inimigos[i].faltaPara45 -= 3;
                    }
                }
                else{
                    if(inimigos[i].esquerdaDireita == 0){
                        inimigos[i].x -= tamanho_inimigos.largura/2;
                        if(inimigos[i].x >= 0 && inimigos[i].x <= 10){
                            inimigos[i].esquerdaDireita =1;
                            inimigos[i].faltaPara45 = 45;
                            inimigos[i].jaMoveuParaBaixo = 1;
                        }
                    }
                    else{
                        inimigos[i].x += tamanho_inimigos.largura/2;
                        if(inimigos[i].x >= 480 && inimigos[i].x <= 490){
                            inimigos[i].esquerdaDireita = 0;
                            inimigos[i].faltaPara45 = 45;
                            inimigos[i].jaMoveuParaBaixo = 1;
                        }
                    }
                }
            }
        }
    }
}


void movimenta_tiros(){ //movimenta_tiros com colisão
    if(quantidade_tiros > 0){
        for(int i = 0; i < quantidade_tiros; i++){
            for(int j  = 0; j < quantidade_inimigos; j++){
                if(tiros[i].y == inimigos[j].y || tiros[i].y >= inimigos[j].y && tiros[i].y <= inimigos[j].y + tamanho_inimigos.comprimento && inimigos[j].colidiu == false){
                    if(tiros[i].x >= inimigos[j].x && tiros[i].x <= inimigos[j].x + tamanho_inimigos.largura || tiros[i].x + tamanho_tiros.largura >= inimigos[j].x && tiros[i].x + tamanho_tiros.largura <= inimigos[j].x + tamanho_inimigos.largura){
                        tiros[i].y = 500;
                        inimigos[j].colidiu = true;
                        inimigos[j].y = 550;
                        inimigos[j].x = -30;
                        inimigos_mortos++;
                        printf("Inimigos mortos: %d\n", inimigos_mortos);
                        printf("Quantidade de inimigos vivos restantes: %d\n", quantidade_inimigos - inimigos_mortos);
                        printf("Quantidade de tiros inimigo: %d\n", quantidade_tiros_inimigos);
                        if(inimigos_mortos == quantidade_inimigos){
                            quantidade_inimigos++; //próxima fase
                            inimigos_mortos = 0;
                            quantidade_tiros_inimigos = 0;
                            printf("nivel: %d\n", nivel);
                            nivel++;
                            tiros = (Posicao*) realloc(tiros, 2 * sizeof(Posicao));
                            //inimigos = (Posicao*) realloc (inimigos, (quantidade_inimigos + 1) * sizeof(Posicao));

                            quantidade_tiros = 0;
                            tamanhoInimigo -= VARIACAO_TAMANHO_INIMIGOS;
                            tempo_tiro -= 2; //tempo dos tiros inimigos
                            variacao_nivel += 0.05; //velocidade dos tiros inimigos
                            inicializa();
                            if(quantidade_inimigos >= NUM_MAX_INIMIGOS){ //limite da quantidade de inimigos
                                quantidade_inimigos = NUM_MAX_INIMIGOS-1;
                            }
                            if(tempo_tiro <= 50){ //limite do tempo dos tiros dos inimigos
                                tempo_tiro = 55;
                            }
                            if(tamanhoInimigo < TAMANHO_MINIMO_INIMIGOS){ //Limite do tamanho do inimigo
                                tamanhoInimigo = TAMANHO_MINIMO_INIMIGOS;
                            }
                            inimigos = (Inimigo*) realloc (inimigos, (quantidade_inimigos + 1) * sizeof(Inimigo));
                        }
                    }
                }
            }
            tiros[i].y += tamanho_tiros.comprimento;
        }
    }
}



void movimenta_tiros_inimigos(){
    if(quantidade_tiros_inimigos >= 0){
        for(int i = 0; i < quantidade_tiros_inimigos; i++){
            if(tiros_inimigos[i].y == tamanho_player.comprimento || tiros_inimigos[i].y >= 0 && tiros_inimigos[i].y <= tamanho_player.comprimento){
                if(tiros_inimigos[i].x >= posicao_player.x && tiros_inimigos[i].x <= posicao_player.x + tamanho_player.largura || tiros_inimigos[i].x + tamanho_tiros.largura >= posicao_player.x && tiros_inimigos[i].x <= posicao_player.x + tamanho_player.largura){
                    tiros_inimigos[i].colidiu = true;
                    quantidade_tiros_inimigos = 0;
                    quantidade_tiros = 0;
                    inimigos_mortos = 0;
                    tiros = (Posicao*) realloc(tiros, 2 * sizeof(Posicao));
                    tiros_inimigos = (Posicao*) realloc(tiros_inimigos, 1 * sizeof(Posicao));
                    inimigos = (Inimigo*) realloc(inimigos, (quantidade_inimigos + 3)* sizeof(Inimigo));
                    inicializa();
                }
                else{
                    tiros_inimigos[i].y -= (variacao_nivel * tamanho_tiros.comprimento);
                }
            }
            else{
                tiros_inimigos[i].y -= (variacao_nivel * tamanho_tiros.comprimento);
            }
        }
    }
}

void atualizaCena(int periodo) {
    // Pede ao GLUT para redesenhar a tela, assim que possível
    int variavel_controle = 0, todos_tiros_inimigos_sairam = 0, tiros_inimigos_sairam = 0;
    if(paused == false){
        glutKeyboardFunc(teclado);
        movimenta_tiros();
        tempo++;
        if(tempo > 0){
            if(primeiro_tiro == 0){
                primeiro_tiro =1;
                cria_tiros_inimigos();
            }
            if(tempo % (tempo_tiro) == 0 || variavel_controle == 1){
                if(variavel_controle == 0){
                    variavel_controle = 1;
                }

                for(int i = 0; i < quantidade_tiros_inimigos; i++){
                    if(tiros_inimigos[i].y < 0){
                        tiros_inimigos_sairam++;
                    }
                    else{
                        tiros_inimigos_sairam = 0;
                        variavel_controle = 1;
                    }
                    if(tiros_inimigos_sairam == quantidade_tiros_inimigos){
                        variavel_controle = 0;
                        tempo = 0;
                        cria_tiros_inimigos();
                    }
                }
            }
            if(tempo % 5 == 0){ //20
                movimenta_inimigos();
            }
        }
        movimenta_tiros_inimigos(); //Descomentar
        glutPostRedisplay();
    }
    //glutPostRedisplay();

    // Se registra novamente, para que fique sempre sendo chamada (30 FPS)
    glutTimerFunc(periodo, atualizaCena, periodo);
}

int main(int argc, char** argv){
    glutInit(&argc, argv);

    //glutInitContextVersion(1, 1);
    //glutInitContextProfile(GLUT_COMPATIBILITY_PROFILE);

    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
    glutInitWindowSize(800, 640);
    glutInitWindowPosition(250, 250);
    //
    //glEnable(GL_BLEND);
    //glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    //
    glutCreateWindow("Galaxian - TP1");
    inicializa();
    glutDisplayFunc(desenha);
    glutReshapeFunc(redimensiona);
    glutKeyboardFunc(teclado);
    glutTimerFunc(0,atualizaCena, 11); //11


    glutMainLoop();
    return 0;
}
